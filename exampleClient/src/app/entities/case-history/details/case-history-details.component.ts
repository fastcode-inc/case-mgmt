import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { FormBuilder, Validators } from '@angular/forms';
import { MatDialog } from '@angular/material/dialog';

import { CaseHistoryService } from '../case-history.service';
import { ICaseHistory } from '../icase-history';

import { BaseDetailsComponent, PickerDialogService } from 'src/app/common/shared';
import { ErrorService } from 'src/app/core/services/error.service';
import { GlobalPermissionService } from 'src/app/core/services/global-permission.service';

import { CasesService } from 'src/app/entities/cases/cases.service';

@Component({
  selector: 'app-case-history-details',
  templateUrl: './case-history-details.component.html',
  styleUrls: ['./case-history-details.component.scss'],
})
export class CaseHistoryDetailsComponent extends BaseDetailsComponent<ICaseHistory> implements OnInit {
  title = 'CaseHistory';
  parentUrl = 'casehistory';
  constructor(
    public formBuilder: FormBuilder,
    public router: Router,
    public route: ActivatedRoute,
    public dialog: MatDialog,
    public caseHistoryService: CaseHistoryService,
    public pickerDialogService: PickerDialogService,
    public errorService: ErrorService,
    public casesService: CasesService,
    public globalPermissionService: GlobalPermissionService
  ) {
    super(formBuilder, router, route, dialog, pickerDialogService, caseHistoryService, errorService);
  }

  ngOnInit() {
    this.entityName = 'CaseHistory';
    this.setAssociations();
    super.ngOnInit();
    this.setForm();
    this.getItem();
  }

  setForm() {
    this.itemForm = this.formBuilder.group({
      caseHistoryId: ['', Validators.required],
      message: [''],
      timestamp: ['', Validators.required],
      caseId: ['', Validators.required],
      casesDescriptiveField: ['', Validators.required],
    });

    this.fields = [
      {
        name: 'timestamp',
        label: 'timestamp',
        isRequired: true,
        isAutoGenerated: false,
        type: 'time',
      },
      {
        name: 'message',
        label: 'message',
        isRequired: false,
        isAutoGenerated: false,
        type: 'string',
      },
      {
        name: 'caseHistoryId',
        label: 'case History Id',
        isRequired: true,
        isAutoGenerated: false,
        type: 'number',
      },
    ];
  }

  onItemFetched(item: ICaseHistory) {
    this.item = item;
    this.itemForm.patchValue(item);
  }

  setAssociations() {
    this.associations = [
      {
        column: [
          {
            key: 'caseId',
            value: undefined,
            referencedkey: 'caseId',
          },
        ],
        isParent: false,
        table: 'cases',
        type: 'ManyToOne',
        label: 'cases',
        service: this.casesService,
        descriptiveField: 'casesDescriptiveField',
        referencedDescriptiveField: 'caseId',
      },
    ];

    this.childAssociations = this.associations.filter((association) => {
      return association.isParent;
    });

    this.parentAssociations = this.associations.filter((association) => {
      return !association.isParent;
    });
  }

  onSubmit() {
    let caseHistory = this.itemForm.getRawValue();
    caseHistory.timestamp = this.dataService.getFormattedTime(caseHistory.timestamp, true);
    super.onSubmit(caseHistory);
  }
}
