import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { FormBuilder, Validators } from '@angular/forms';
import { MatDialog } from '@angular/material/dialog';

import { CasesService } from '../cases.service';
import { ICases } from '../icases';

import { BaseDetailsComponent, PickerDialogService } from 'src/app/common/shared';
import { ErrorService } from 'src/app/core/services/error.service';
import { GlobalPermissionService } from 'src/app/core/services/global-permission.service';

@Component({
  selector: 'app-cases-details',
  templateUrl: './cases-details.component.html',
  styleUrls: ['./cases-details.component.scss'],
})
export class CasesDetailsComponent extends BaseDetailsComponent<ICases> implements OnInit {
  title = 'Cases';
  parentUrl = 'cases';
  constructor(
    public formBuilder: FormBuilder,
    public router: Router,
    public route: ActivatedRoute,
    public dialog: MatDialog,
    public casesService: CasesService,
    public pickerDialogService: PickerDialogService,
    public errorService: ErrorService,
    public globalPermissionService: GlobalPermissionService
  ) {
    super(formBuilder, router, route, dialog, pickerDialogService, casesService, errorService);
  }

  ngOnInit() {
    this.entityName = 'Cases';
    this.setAssociations();
    super.ngOnInit();
    this.setForm();
    this.getItem();
  }

  setForm() {
    this.itemForm = this.formBuilder.group({
      caseId: ['', Validators.required],
      status: [''],
      summary: [''],
      type: [''],
    });

    this.fields = [
      {
        name: 'type',
        label: 'type',
        isRequired: false,
        isAutoGenerated: false,
        type: 'string',
      },
      {
        name: 'summary',
        label: 'summary',
        isRequired: false,
        isAutoGenerated: false,
        type: 'string',
      },
      {
        name: 'status',
        label: 'status',
        isRequired: false,
        isAutoGenerated: false,
        type: 'string',
      },
      {
        name: 'caseId',
        label: 'case Id',
        isRequired: true,
        isAutoGenerated: false,
        type: 'number',
      },
    ];
  }

  onItemFetched(item: ICases) {
    this.item = item;
    this.itemForm.patchValue(item);
  }

  setAssociations() {
    this.associations = [
      {
        column: [
          {
            key: 'caseId',
            value: undefined,
            referencedkey: 'caseId',
          },
        ],
        isParent: true,
        table: 'caseDocument',
        type: 'OneToMany',
        label: 'caseDocuments',
      },
      {
        column: [
          {
            key: 'caseId',
            value: undefined,
            referencedkey: 'caseId',
          },
        ],
        isParent: true,
        table: 'caseHistory',
        type: 'OneToMany',
        label: 'caseHistorys',
      },
      {
        column: [
          {
            key: 'caseId',
            value: undefined,
            referencedkey: 'caseId',
          },
        ],
        isParent: true,
        table: 'personCase',
        type: 'OneToMany',
        label: 'personCases',
      },
      {
        column: [
          {
            key: 'caseId',
            value: undefined,
            referencedkey: 'caseId',
          },
        ],
        isParent: true,
        table: 'task',
        type: 'OneToMany',
        label: 'tasks',
      },
    ];

    this.childAssociations = this.associations.filter((association) => {
      return association.isParent;
    });

    this.parentAssociations = this.associations.filter((association) => {
      return !association.isParent;
    });
  }

  onSubmit() {
    let cases = this.itemForm.getRawValue();
    super.onSubmit(cases);
  }
}
