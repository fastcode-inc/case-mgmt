import { Component, OnInit, Inject } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { FormBuilder, Validators } from '@angular/forms';
import { MatDialogRef, MatDialog, MAT_DIALOG_DATA } from '@angular/material/dialog';

import { PersonService } from '../person.service';
import { IPerson } from '../iperson';
import { BaseNewComponent, PickerDialogService } from 'src/app/common/shared';
import { ErrorService } from 'src/app/core/services/error.service';
import { GlobalPermissionService } from 'src/app/core/services/global-permission.service';

import { UsersService } from 'src/app/admin/user-management/users/users.service';

@Component({
  selector: 'app-person-new',
  templateUrl: './person-new.component.html',
  styleUrls: ['./person-new.component.scss'],
})
export class PersonNewComponent extends BaseNewComponent<IPerson> implements OnInit {
  title: string = 'New Person';
  constructor(
    public formBuilder: FormBuilder,
    public router: Router,
    public route: ActivatedRoute,
    public dialog: MatDialog,
    public dialogRef: MatDialogRef<PersonNewComponent>,
    @Inject(MAT_DIALOG_DATA) public data: any,
    public pickerDialogService: PickerDialogService,
    public personService: PersonService,
    public errorService: ErrorService,
    public usersService: UsersService,
    public globalPermissionService: GlobalPermissionService
  ) {
    super(formBuilder, router, route, dialog, dialogRef, data, pickerDialogService, personService, errorService);
  }

  ngOnInit() {
    this.entityName = 'Person';
    this.setAssociations();
    super.ngOnInit();
    this.setForm();
    this.checkPassedData();
  }

  setForm() {
    this.itemForm = this.formBuilder.group({
      birthDate: [''],
      comments: [''],
      givenName: [''],
      homePhone: [''],
      personId: ['', Validators.required],
      surname: [''],
      username: [''],
      usersDescriptiveField: [''],
    });

    this.fields = [
      {
        name: 'surname',
        label: 'surname',
        isRequired: false,
        isAutoGenerated: false,
        type: 'string',
      },
      {
        name: 'personId',
        label: 'person Id',
        isRequired: true,
        isAutoGenerated: false,
        type: 'number',
      },
      {
        name: 'homePhone',
        label: 'home Phone',
        isRequired: false,
        isAutoGenerated: false,
        type: 'string',
      },
      {
        name: 'givenName',
        label: 'given Name',
        isRequired: false,
        isAutoGenerated: false,
        type: 'string',
      },
      {
        name: 'comments',
        label: 'comments',
        isRequired: false,
        isAutoGenerated: false,
        type: 'string',
      },
      {
        name: 'birthDate',
        label: 'birth Date',
        isRequired: false,
        isAutoGenerated: false,
        type: 'date',
      },
    ];
  }

  setAssociations() {
    this.associations = [
      {
        column: [
          {
            key: 'username',
            value: undefined,
            referencedkey: 'username',
          },
        ],
        isParent: false,
        table: 'users',
        type: 'ManyToOne',
        service: this.usersService,
        label: 'users',
        descriptiveField: 'usersDescriptiveField',
        referencedDescriptiveField: 'username',
      },
    ];
    this.parentAssociations = this.associations.filter((association) => {
      return !association.isParent;
    });
  }

  onSubmit() {
    let person = this.itemForm.getRawValue();
    super.onSubmit(person);
  }
}
